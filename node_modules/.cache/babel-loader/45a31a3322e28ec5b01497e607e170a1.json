{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\17039\\\\git\\\\ibm-acc\\\\to-do-list_week1-MattIkeW\\\\src\\\\pages\\\\Home.js\";\nimport React, { Component } from 'react';\nimport \"../AddTodo.js\";\nimport \"../todos.js\";\nimport \"../Home.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Home extends Component {\n  // A default state of this component with an empty list of todos.\n  constructor() {\n    super();\n\n    this.addTodo = todo => {\n      // In React, keys or ids in a list help identify which items have changed, been added or removed. Keys\n      // should not share duplicate values.\n      // To avoid having dup values, we use the Math.random() function to generate a random value for a todo id.\n      // This solution works for a small application but a more complex hashing function should be used when\n      // dealing with a larger data sensitive project.\n      todo.id = Math.random(); // An array that contains the current array and the new todo item\n\n      let new_list = [...this.state.todos, todo]; // Updates the local state with the new array.\n\n      this.setState({\n        todos: new_list\n      });\n    };\n\n    this.state = {\n      // create your empty list here call it todos.\n      const: todos\n    };\n  } // the addTodo function simply creates a new array that includes the user submitted todo item and then\n  // updates the state with the new list.\n\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Home\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Todo's \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\" \", /*#__PURE__*/_jsxDEV(Todos, {\n          todos: this.todos\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(AddTodo, {\n          addTodo: this.addTodo\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default Home;","map":{"version":3,"names":["React","Component","Home","constructor","addTodo","todo","id","Math","random","new_list","state","todos","setState","const","render"],"sources":["C:/Users/17039/git/ibm-acc/to-do-list_week1-MattIkeW/src/pages/Home.js"],"sourcesContent":["import React, { Component } from 'react';\r\nimport \"../AddTodo.js\";\r\nimport \"../todos.js\";\r\nimport \"../Home.css\";\r\n  \r\nclass Home extends Component {\r\n  // A default state of this component with an empty list of todos.\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      // create your empty list here call it todos.\r\n      const :todos \r\n    };\r\n  }\r\n  // the addTodo function simply creates a new array that includes the user submitted todo item and then\r\n  // updates the state with the new list.\r\n  addTodo = (todo) => {\r\n    // In React, keys or ids in a list help identify which items have changed, been added or removed. Keys\r\n    // should not share duplicate values.\r\n    // To avoid having dup values, we use the Math.random() function to generate a random value for a todo id.\r\n    // This solution works for a small application but a more complex hashing function should be used when\r\n    // dealing with a larger data sensitive project.\r\n    todo.id = Math.random();\r\n    // An array that contains the current array and the new todo item\r\n    let new_list = [...this.state.todos, todo];\r\n    // Updates the local state with the new array.\r\n    this.setState({\r\n      todos: new_list,\r\n    });\r\n  };\r\n  render() {\r\n    return (\r\n      <div className=\"Home\">\r\n        <h1>Todo's </h1>\r\n        <p> <Todos todos={this.todos } />\r\n          <AddTodo addTodo={this.addTodo} />\r\n        </p>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Home;"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAO,eAAP;AACA,OAAO,aAAP;AACA,OAAO,aAAP;;;AAEA,MAAMC,IAAN,SAAmBD,SAAnB,CAA6B;EAC3B;EACAE,WAAW,GAAG;IACZ;;IADY,KASdC,OATc,GASHC,IAAD,IAAU;MAClB;MACA;MACA;MACA;MACA;MACAA,IAAI,CAACC,EAAL,GAAUC,IAAI,CAACC,MAAL,EAAV,CANkB,CAOlB;;MACA,IAAIC,QAAQ,GAAG,CAAC,GAAG,KAAKC,KAAL,CAAWC,KAAf,EAAsBN,IAAtB,CAAf,CARkB,CASlB;;MACA,KAAKO,QAAL,CAAc;QACZD,KAAK,EAAEF;MADK,CAAd;IAGD,CAtBa;;IAEZ,KAAKC,KAAL,GAAa;MACX;MACAG,KAAK,EAAEF;IAFI,CAAb;EAID,CAR0B,CAS3B;EACA;;;EAeAG,MAAM,GAAG;IACP,oBACE;MAAK,SAAS,EAAC,MAAf;MAAA,wBACE;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QADF,eAEE;QAAA,6BAAI,QAAC,KAAD;UAAO,KAAK,EAAE,KAAKH;QAAnB;UAAA;UAAA;UAAA;QAAA,QAAJ,eACE,QAAC,OAAD;UAAS,OAAO,EAAE,KAAKP;QAAvB;UAAA;UAAA;UAAA;QAAA,QADF;MAAA;QAAA;QAAA;QAAA;MAAA,QAFF;IAAA;MAAA;MAAA;MAAA;IAAA,QADF;EAQD;;AAlC0B;;AAqC7B,eAAeF,IAAf"},"metadata":{},"sourceType":"module"}